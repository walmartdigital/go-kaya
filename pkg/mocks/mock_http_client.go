// Code generated by MockGen. DO NOT EDIT.
// Source: http_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	client "github.com/walmartdigital/go-kaya/pkg/client"
	reflect "reflect"
)

// MockHTTPClient is a mock of HTTPClient interface
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockHTTPClient) Get(endpoint string) (int, *[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", endpoint)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*[]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockHTTPClientMockRecorder) Get(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClient)(nil).Get), endpoint)
}

// Post mocks base method
func (m *MockHTTPClient) Post(endpoint string, body []byte) (int, *[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", endpoint, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*[]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Post indicates an expected call of Post
func (mr *MockHTTPClientMockRecorder) Post(endpoint, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPClient)(nil).Post), endpoint, body)
}

// Put mocks base method
func (m *MockHTTPClient) Put(endpoint string, body []byte) (int, *[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", endpoint, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*[]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Put indicates an expected call of Put
func (mr *MockHTTPClientMockRecorder) Put(endpoint, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockHTTPClient)(nil).Put), endpoint, body)
}

// Delete mocks base method
func (m *MockHTTPClient) Delete(endpoint string) (int, *[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", endpoint)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*[]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete
func (mr *MockHTTPClientMockRecorder) Delete(endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHTTPClient)(nil).Delete), endpoint)
}

// MockHTTPClientFactory is a mock of HTTPClientFactory interface
type MockHTTPClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientFactoryMockRecorder
}

// MockHTTPClientFactoryMockRecorder is the mock recorder for MockHTTPClientFactory
type MockHTTPClientFactoryMockRecorder struct {
	mock *MockHTTPClientFactory
}

// NewMockHTTPClientFactory creates a new mock instance
func NewMockHTTPClientFactory(ctrl *gomock.Controller) *MockHTTPClientFactory {
	mock := &MockHTTPClientFactory{ctrl: ctrl}
	mock.recorder = &MockHTTPClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPClientFactory) EXPECT() *MockHTTPClientFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockHTTPClientFactory) Create(arg0 string, arg1 client.HTTPClientConfig) (client.HTTPClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(client.HTTPClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockHTTPClientFactoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHTTPClientFactory)(nil).Create), arg0, arg1)
}
